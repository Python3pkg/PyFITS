##########
PyFITS FAQ
##########

.. contents::
.. sectnum::

General Questions
=================

What is PyFITS?
---------------

PyFITS_ is a library written in, and for use with the Python_ programming
language for reading, writing, and manipulating FITS_ formatted files.  It
includes a high-level interface to FITS headers with the ability for high and
low-level manipulation of headers, and it supports reading image and table
data as Numpy_ arrays.  It also supports more obscure and non-standard formats
found in some FITS files.

PyFITS includes two command-line utilities for working with FITS files:
fitscheck, which can verify and write FITS checksums; and fitsdiff, which can
analyze and display the differences between two FITS files.

Although PyFITS is written mostly in Python, it includes an optional module
written in C that's required to read/write compressed image data.  However,
the rest of PyFITS functions without this extension module.

.. _PyFITS: http://www.stsci.edu/institute/software_hardware/pyfits
.. _Python: http://www.python.org
.. _FITS: http://fits.gsfc.nasa.gov/
.. _Numpy: http://numpy.scipy.org/

What is the development status of PyFITS?
-----------------------------------------

PyFITS is written and maintained by the Science Software Branch at the `Space
Telescope Science Institute`_, and is licensed by AURA_ under a `3-clause BSD
license`_ (see `LICENSE.txt`_ in the PyFITS source code).

PyFITS' current primary developer and active maintainer is `Erik Bray`_, though
patch submissions are welcome from anyone.  It has a `Trac site`_ where the
source code can be browsed, and where bug reports may be submitted.  The source
code resides primarily in an `SVN repository`_ which allows anonymous
checkouts, though a `Git mirror`_ also exists.  PyFITS also has a `GitHub
site`_.

The current stable release series is 3.0.x.  Each 3.0.x release tries to
contain only bug fixes, and to not introduce any significant behavioral or API
changes (though this isn't guaranteed to be perfect).  The upcoming 3.1 release
will contain new features and some API changes, though will try maintain as
much backwards-compatibility as possible.  After the 3.1 release there may be
further 3.0.x releases for bug fixes only where possible.  Older versions of
PyFITS (2.4 and earlier) are no longer actively supported.

PyFITS is also included as a major component of upcoming Astropy_ project as
the `astropy.io.fits` module.  The goal is for Astropy to eventually serve as a
drop-in replacement for PyFITS (it even includes a legacy-compatibility mode
where the `astropy.io.fits` module can still be imported as `pyfits`.
However, for the time being PyFITS will still be released as an independent
product as well, until such time that the Astropy project proves successful and
widely-adopted.

.. _Space Telescope Science Institute: http://www.stsci.edu/
.. _AURA: http://www.aura-astronomy.org/
.. _3-clause BSD license: http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29
.. _LICENSE.txt: https://trac.assembla.com/pyfits/browser/trunk/LICENSE.txt
.. _Erik Bray: mailto:embray@stsci.edu
.. _Trac site: https://trac.assembla.com/pyfits/
.. _SVN repository: https://subversion.assembla.com/svn/pyfits/
.. _Git mirror: git://github.com/iguananaut/PyFITS.git
.. _GitHub site: https://github.com/iguananaut/PyFITS
.. _Astropy: http://www.astropy.org/


Build and Installation Questions
================================

Is PyFITS available on Windows?
-------------------------------

Yes--the majority of PyFITS is pure Python, and can be installed and used on
any platform that supports Python (>=2.5).  However, PyFITS includes an
optional C extension module for reading/writing compressed image HDUs.  As most
Windows systems are not configured to compile C source code, binary installers
are also available for Windows.  Though PyFITS can also be installed from
source even on Windows systems without a compiler by disabling the compression
module.  See `How do I install PyFITS from source on Windows?`_ for more
details.

Where is the Windows installer for version X of PyFITS on version Y of Python?
------------------------------------------------------------------------------

Every official PyFITS build for Windows is eventually uploaded to PyPI_.  This
includes builds for every major Python release from 2.5.x and up, except for
3.0 as there is no official Numpy release for Python 3.0 on Windows.  The one
binary module included in these builds was linked with Numpy 1.6.1, though it
should work with other recent Numpy versions.

Sometimes the Windows binary installers don't go up immediately after every
PyFITS release.  But if they appear missing they should go up within another
business day or two.  This has gotten better with recent releases thanks to
some automation.

.. _PyPI: http://pypi.python.org/pypi/pyfits

Why is the PyFITS installation failing on Windows?
--------------------------------------------------

The most likely cause of installation failure on Windows is if building/
installing from source fails due to the lack of a compiler for the optional C
extension module.  Such a failure would produce an error that looks something
like::

    building 'pyfits.compression' extension
    error: Unable to find vcvarsall.bat

Your best bet in cases like this is to install from one of the binary
executable installers available for Windows on PyPI.  However, there are still
cases where you may need to install from source: For example, it's difficult to
use the binary installers with virtualenv.  See `How do I install PyFITS from
source on Windows?`_ for more detailed instructions on building on Windows.

For other installation errors not mentioned by this FAQ, please contact
help@stsci.edu with a description of the problem.

How do I install PyFITS from source on Windows?
-----------------------------------------------

There are a few options for building/installing PyFITS from source on Windows.

First of all, as mentioned elsewhere, most of PyFITS is pure-Python.  Only the
C extension module for reading/writing compressed images needs to be compiled.
If you don't need compressed image support, PyFITS can be installed without it.

In future releases this will hopefully be even easier, but for now it's
necessary to edit one file in order to disable the extension module.  Locate
the `setup.cfg`_ file at the root of the PyFITS source code.  This is the file
that describes what needs to be installed for PyFITS.  Find the line that reads
``[extension=pyfits.compression]``.  This is the section that lists what needs
to be compiled for the extension module.  Comment out every line in the
extension section by prepending it with a ``#`` character (stopping at the 
``[build_ext]`` line).  It should look like this::

    ...
    scripts = scripts/fitscheck

    #[extension=pyfits.compression]
    #sources = 
    #    src/compress.c
    #    src/fits_hcompress.c
    #    src/fits_hdecompress.c
    #    src/fitsio.c
    #    src/pliocomp.c
    #    src/compressionmodule.c
    #    src/quantize.c
    #    src/ricecomp.c
    #    src/zlib.c
    #    src/inffast.c
    #    src/inftrees.c
    #    src/trees.c
    #include_dirs = numpy
    # Squelch a handful of warnings (which actually cause pip to break in tox and
    # other environments due to gcc outputting non-ASCII characters in some
    # terminals; see python issue6135)
    #extra_compile_args =
    #    -Wno-unused-function
    #    -Wno-strict-prototypes

    [build_ext]
    ...

With these lines properly commented out, rerun ``python setup.py install``, and
it should skip building/installing the compression module.  PyFITS will work
fine with out it, but will issue warnings when encountering a compressed image
that it can't read.

If you do need to compile the compression module, this can still be done on
Windows with just a little extra work.  By default, Python tries to compile
extension modules with the same compiler that Python itself was compiled with.

To check what compiler Python was built with, the easiest way is to run::

    python -c "import platform; print platform.python_compiler()"

For the official builds of recent Python versions this should be something
like::

    MSC v.1500 32 bit (Intel)

For unofficial Windows distributions of Python, such as ActiveState, EPD, or
Cygwin, your mileage may vary.

As it so happens, MSC v.15xx is the compiler version included with Visual
C++ 2008.  Luckily, Microsoft distributes a free version of this as `Visual C++
Express Edition`_.  So for building Python extension modules on Windows this is
one of the simpler routes.  Just install the free VC++ 2008.  It should install
a link to the Start Menu at All Programs->Microsoft Visual C++ Express
Edition->Visual Studio Tools->Visual Studio 2008 Command Prompt.

If you run that link, it should launch a command prompt with reasonable
environment variables set up for using Visual C++.  Then change directories to
your copy of the PyFITS source code and re-run ``python setup.py install``.
You may also need to comment out the ``extra_compile_args`` option in the
``setup.cfg`` file (its value is the two lines under it after the equal sign).
Though the need to manually disable this option for MSC will be fixed in a
future PyFITS version.

Another option is to use gcc through `MinGW`_, which is in fact how the PyFITS
releases for Windows are currently built.  This article provides a good
overview of how to set this up: http://seewhatever.de/blog/?p=217

.. _setup.cfg: https://trac.assembla.com/pyfits/browser/trunk/setup.cfg
.. _Visual C++ Express Edition: http://www.microsoft.com/visualstudio/en-us/products/2008-editions/express
.. _MinGW: http://www.mingw.org/

Is PyFITS available for Mac OSX?
--------------------------------

Yes, but there is no binary package specifically for OSX (such as a .dmg, for
example).  For OSX just download, build, and install the source package.  This
is generally easier on OSX than it is on Windows, thanks to the more
developer-friendly environment.

The only major problem with building on OSX seems to occur for some users of
10.7 Lion, with misconfigured systems.  See the next question for details on
that.

To build PyFITS without the optional compression module, follow the
instructions in `How do I install PyFITS from source on Windows?`_.

Why is the PyFITS installation failing on OSX Lion (10.7)?
----------------------------------------------------------

There is a common problem that affects all Python packages with C extension
modules (not just PyFITS) for some users of OSX 10.7.  What usually occurs is
that when building the package several errors will be output, ending with
something like::

    unable to execute gcc-4.2: No such file or directory
    error: command 'gcc-4.2' failed with exit status 1

There are a few other errors like it that can occur.  The problem is that when
you build a C extension, by default it will try to use the same compiler that
your Python was built with. In this case, since you're using the 32-bit
universal build of Python it's trying to use the older gcc-4.2 and is trying
to build with PPC support, which is no longer supported in Xcode.

In this case the best solution is to install the x86-64 build of Python for
OSX (http://www.python.org/ftp/python/2.7.2/python-2.7.2-macosx10.6.dmg for
2.7.2).  In fact, this is the build version officially supported for use on
Lion.  Other, unofficial Python buils such as from `MacPorts`_ may also work.

.. _MacPorts: http://astrofrog.github.com/macports-python/

How do I find out what version of PyFITS I have installed?
----------------------------------------------------------

To output the PyFITS version from the command line, run::

    $ python -c 'import pyfits; print(pyfits.__version__)'

When PyFITS is installed with stsci_python, it is also possible to check the
installed SVN revision by importing ``pyfits.svn_version``.  Then use
``dir(pyfits.svn_version)`` to view a list of available attributes.  A
feature like this will be available soon in standalone versions of PyFITS as
well.

How do I run the tests for PyFITS?
----------------------------------

Currently the best way to run the PyFITS tests is to download the source code,
either from a source release or from version control, and to run the tests out
of the source.  It is not necessary to install PyFITS to run the tests out of
the source code.

The PyFITS tests require `nose`_ to run.  nose can be installed on any Python
version using pip or easy_install.  See the nose documentation for more
details.

With nose installed, it is simple to run the tests on Python 2.x::

    $ python setup.py nosetests

If PyFITS has not already been built, this will build it automatically, then
run the tests.  This does not cause PyFITS to be installed.

On Python 3.x the situation is a little more complicated.  This is due to the
fact that PyFITS' source code is not Python 3-compatible out of the box, but
has to be run through the 2to3 converter.  Normally when you build/install
PyFITS on Python 3.x, the 2to3 conversion is performed automatically.
Unfortunately, nose does not know to use the 2to3'd source code, and will
instead try to import and test the unconverted source code.

To work around this, it is necessary to first build PyFITS (which will run the
source through 2to3)::

    $ python setup.py build

Then run the ``nosetests`` command, but pointing it to the ``build`` tree
where the 2to3'd source code and tests reside, using the ``-w`` switch::

    $ python setup.py nosetests -w build/lib.linux-x86_64-3.2

where the exact path of the ``build/lib.*`` directory will vary depending on
your platform and Python version.

.. _nose: http://readthedocs.org/docs/nose/en/latest/

How can I build a copy of the PyFITS documentation for my own use?
------------------------------------------------------------------

First of all, it's worth pointing out that the documentation for the latest
version of PyFITS can always be downloaded in `PDF form
<http://stsdas.stsci.edu/download/docs/The_PyFITS_Handbook.pdf>`_ or browsed
online in `HTML <http://packages.python.org/pyfits>`_.  There are also plans
to make the docs for older versions of PyFITS, as well as up-to-date
development docs available online.

Otherwise, to build your own version of the docs either for offline use, or to
build the development version of the docs there are a few reqirements.  The
most import requirement is `Sphinx`_, which is the toolkit used to generate
the documentation.  Use ``pip install sphinx`` or ``easy_install sphinx`` to
install Sphinx.  Using pip or easy_install will install the correct versions
of Sphinx's basic dependencies, which include docutils, Jinja2, and Pygments.

Next, the docs require STScI's custom Sphinx theme, `stsci.sphinxext`_.  It's
a simple pure-Python pacakge and can be installed with pip or easy_install.

The next requirement is `numpydoc`_, which is not normally installed with
Numpy itself.  Install it with pip or easy_install.  Numpy is also required,
though it is of course a requirement of PyFITS itself.

Finally, it is necessary to have `matplotlib`_, specifically for
matplotlib.sphinxext.  This is perhaps the most onerous requirement if you do
not already have it instaled. Please refer to the matplotlib documentation for
details on downloading and installing matplotlib.

It is also necessary to install PyFITS itself in order to generate the API
documentation.  For this reason, it is a good idea to install Sphinx and
PyFITS into a `virtualenv`_ in order to build the development version of the
docs (see below).

With all the requirements installed, change directories into the `docs/`
directory in the PyFITS source code, and run::

    $ make html

to build the HTML docs, which will be output to `build/html`.  To build the
docs in other formats, please refer to the Sphinx documentation.

To summarize, assuming that you already have Numpy and Matplotlib on your
Python installation, perform the following steps from within the PyFITS source
code::

    $ virtualenv --system-site-packages pyfits-docs
    $ source pyfits-docs/bin/activate
    $ pip install sphinx
    $ pip install numpydoc
    $ pip install stsci.sphinxext
    $ python setup.py install pyfits
    $ cd docs/
    $ make html


.. _Sphinx: http://sphinx.pocoo.org/
.. _stsci.sphinxext: http://pypi.python.org/pypi/stsci.sphinxext
.. _numpydoc: http://pypi.python.org/pypi/numpydoc
.. _matplotlib: http://matplotlib.sourceforge.net/
.. _virtualenv: http://pypi.python.org/pypi/virtualenv


Usage Questions
===============

Something didn't work as I expected.  Did I do something wrong?
---------------------------------------------------------------

Possibly.  But if you followed the documentation and things still did not work
as expected, it is entirely possible that there is a mistake in the
documentation, a bug in the code, or both.  So feel free to report it as a
bug.  There are also many, many corner cases in FITS files, with new ones
discovered almost every week.  PyFITS is always improving, but does not
support all cases perfectly.  There are some features of the FITS format
(scaled data, for example) that are difficult to support correctly and can
sometimes cause unexpected behavior.

For the most common cases, however, such as reading and updating FITS headers,
images, and tables, PyFITS should be very stable and well-tested.  Before
every PyFITS release it is ensured that all its tests pass on a variety of
platforms, and those tests cover the majority of use-cases (until new
corner cases are discovered).

PyFITS crashed and output a long string of code.  What do I do?
---------------------------------------------------------------

This listing of code is what is knows as a `stack trace`_ (or in Python
parlance a "traceback").  When an unhandled exception occurs in the code,
causing the program to end, this is a way of displaying where the exception
occurred and the path through the code that led to it.

As PyFITS is meant to be used as a piece in other software projects, some
exceptions raised by PyFITS are by design.  For example, one of the most
common exceptions is a `KeyError` when an attempt is made to read the value of
a non-existent keyword in a header::

    >>> import pyfits
    >>> h = pyfits.Header()
    >>> h['NAXIS']
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/path/to/pyfits/header.py", line 125, in __getitem__
        return self._cards[self._cardindex(key)].value
      File "/path/to/pyfits/header.py", line 1535, in _cardindex
        raise KeyError("Keyword %r not found." % keyword)
    KeyError: "Keyword 'NAXIS' not found."

This indicates that something was looking for a keyword called "NAXIS" that
does not exist.  If an error like this occurs in some other software that uses
PyFITS, it may indicate a bug in that software, in that it expected to find a
keyword that didn't exist in a file.

Most "expected" exceptions will output a message at the end of the traceback
giving some idea of why the exception occurred and what to do about it.  The
more vague and mysterious the error message in an exception appears, the more
likely that it was caused by a bug in PyFITS.  So if you're getting an
exception and you really don't know why or what to do about it, feel free to
report it as a bug.

.. _stack trace: http://en.wikipedia.org/wiki/Stack_trace

Why does opening a file work in CFITSIO, ds9, etc. but not in PyFITS?
---------------------------------------------------------------------

How do I turn off the warning messages PyFITS keeps outputting to my console?
-----------------------------------------------------------------------------

How can I check if my code is using deprecated PyFITS features?
---------------------------------------------------------------

What convention does PyFITS use for indexing, such as of extension HDUs?
------------------------------------------------------------------------

How do I open a very large image that won't fit in memory?
----------------------------------------------------------

How can I create a very large FITS file from scratch?
-----------------------------------------------------

How do I create a multi-extension FITS file from scratch?
---------------------------------------------------------

Why is an image containing integer data being converted unexpectedly to floats?
-------------------------------------------------------------------------------

Why am I losing precision when I assign floating point values in the header?
----------------------------------------------------------------------------
