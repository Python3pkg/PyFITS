#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The PyFITS module is a Python library providing access to FITS files.
 FITS (Flexible Image Transport System) is a portable file standard widely
 used in the astronomy community to store images and tables.
 
\end_layout

\begin_layout Subsection
Install PyFITS 
\end_layout

\begin_layout Standard
PyFITS requires Python version 2.3 or newer.
 PyFITS also requires the numarray module.
 Information about numarray can be found in:
\end_layout

\begin_layout Itemize
http://www.stsci.edu/resources/software_hardware/numarray
\end_layout

\begin_layout Standard
To download numarray, go to:
\end_layout

\begin_layout Itemize
http://sourceforge.net/project/numpy
\end_layout

\begin_layout Standard
PyFITS's source code is pure Python.
 It can be downloaded from:
\end_layout

\begin_layout Itemize
http://www.stsci.edu/resources/software_hardware/pyfits/Download
\end_layout

\begin_layout Standard
PyFITS uses python's distutils for its installation.
 To install it, unpack the tar file and type:
\end_layout

\begin_layout Quotation
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard

\emph on
python setup.py install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will install pyfits, readgeis and fitsdiff in python's site-packages
 directory.
 If permissions do not allow this kind of installation PyFITS can be installed
 in a personal directory using one of the commands below.
 Note, that PYTHONPATH has to be set or modified accordingly.
 The three examples below show how to install PyFITS in an arbitrary directory
 <install-dir> and how to modify PYTHONPATH.
\newline

\end_layout

\begin_layout Standard

\emph on
python setup.py install --local=<install-dir> 
\end_layout

\begin_layout Standard

\emph on
setenv PYTHONPATH <install-dir>
\emph default

\newline

\end_layout

\begin_layout Standard

\emph on
python setup.py install --home=<install-dir> 
\end_layout

\begin_layout Standard

\emph on
setenv PYTHONPATH <install-dir>/lib/python
\emph default

\newline

\end_layout

\begin_layout Standard

\emph on
python setup.py install --prefix=<install-lib>
\end_layout

\begin_layout Standard

\emph on
setenv PYTHONPATH <install-dir>lib/python2.3/site-packages
\emph default

\newline

\end_layout

\begin_layout Standard
In this Guide, we'll assume that the reader has basic familiarity with Python.
 Familiarity with numarray is not required, but it will help to understand
 the data structures in PyFITS.
 
\end_layout

\begin_layout Subsection
User Support for PyFITS 
\end_layout

\begin_layout Standard
The official PyFITS web page is: 
\end_layout

\begin_layout Itemize
http://www.stsci.edu/resources/software_hardware/pyfits
\end_layout

\begin_layout Standard
If you have any question or comment regarding PyFITS, user support is available
 through the STScI Help Desk: 
\end_layout

\begin_layout Itemize
E-mail: help@stsci.edu 
\end_layout

\begin_layout Itemize
Phone: (410) 338-1082 
\end_layout

\begin_layout Section
A Quick Tutorial
\end_layout

\begin_layout Standard
This chapter provides a quick introduction of using PyFITS.
 The goal is to demonstrate PyFITS s basic features without getting into
 too much detail.
 If you are a first time user or an occasional PyFITS user, using only the
 most basic functionality, this is where you should start.
 Otherwise, it is safe to skip this chapter.
 
\end_layout

\begin_layout Standard
After installing numarray and PyFITS, start Python and load the PyFITS library.
 Note that the module name is all lower case.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> import pyfits
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Read and Update Existing FITS Files
\end_layout

\begin_layout Subsubsection
Open a FITS file
\end_layout

\begin_layout Standard
Once the PyFITS module is loaded, we can open an existing FITS file:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> hdulist = pyfits.open('input.fits')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
open()
\emph default
 function has several optional arguments which will be discussed in a later
 chapter.
 The default mode, as in the above example, is "readonly".
 The open method returns a PyFITS object called an HDUList which is a Python-lik
e list, consisting of HDU objects.
 An HDU (Header Data Unit) is the highest level component of the FITS file
 structure.
 So, after the above open call, hdulist[0] is the primary HDU, hdulist[1],
 if any, is the first extension HDU, etc.
 The HDUList has a useful method 
\emph on
info()
\emph default
, which summarizes the content of the opened FITS file:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> hdulist.info() 
\end_layout

\begin_layout Standard
Filename: test1.fits 
\end_layout

\begin_layout Standard
No.
 Name Type Cards Dimensions Format 
\end_layout

\begin_layout Standard
0 PRIMARY PrimaryHDU 220 () Int16 
\end_layout

\begin_layout Standard
1 SCI ImageHDU 61 (800, 800) Float32 
\end_layout

\begin_layout Standard
2 SCI ImageHDU 61 (800, 800) Float32 
\end_layout

\begin_layout Standard
3 SCI ImageHDU 61 (800, 800) Float32 
\end_layout

\begin_layout Standard
4 SCI ImageHDU 61 (800, 800) Float32
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After you are done with the opened file, close it with the 
\emph on
close()
\emph default
 method:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> hdulist.close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The headers will still be accessable after the HDUlist is closed.
 The data may or may not be accessable depending on whether the data are
 touched and if they are memory-mapped, see later chapters for detail.
\end_layout

\begin_layout Subsubsection
Working with the Header
\end_layout

\begin_layout Standard
As mentioned earlier, each element of an HDUList is an HDU object with attribute
s of header and data, which can be used to access the header keywords and
 the data.
 The header attribute is a Header instance, another PyFITS object.
 To get the value of a header keyword, simply do (a la Python dictionaries):
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> hdulist[0].header[ targname ] 
\end_layout

\begin_layout Standard
'NGC121' 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
to get the value of the keyword targname, which is a string 'NGC121'.
 
\end_layout

\begin_layout Standard
Although keyword names are always in upper case inside the FITS file, specifying
 a keyword name with PyFITS is case-insensitive, for user s convenience.
 If the specified keyword name does not exist, it will raise a 
\emph on
KeyError
\emph default
 exception.
 We can also get the keyword value by indexing (a la Python lists):
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> hdulist[0].header[27]
\end_layout

\begin_layout Standard
96
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example returns the 28th (like Python lists, it is 0-indexed) keyword's
 value, an integer, 96.
 
\end_layout

\begin_layout Standard
Similarly, it is easy to update a keyword s value in PyFITS, either through
 keyword name or index:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> prihdr = hdulist[0].header 
\end_layout

\begin_layout Standard
>>> hdr[ targname ] = 'NGC121-a' 
\end_layout

\begin_layout Standard
>>> hdr[27] = 99
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use the above syntax if the keyword is already present in the header.
 If the keyword might not exist and you want to add it if it doesn t, use
 the 
\emph on
update()
\emph default
 method:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> prihdr.update('observer','Edwin Hubble')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A header consists of 
\emph on
Card
\emph default
 objects (i.e.
 the 80-column card-images specified in the FITS standard).
 Each Card normally has up to three parts: key, value, and comment.
 To see the entire list of cardimages of an HDU, use the 
\emph on
ascardlist()
\emph default
 method :
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> print prihdr.ascardlist()[:3] 
\end_layout

\begin_layout Standard
SIMPLE = T / file does conform to FITS standard 
\end_layout

\begin_layout Standard
BITPIX = 16 / number of bits per data pixel 
\end_layout

\begin_layout Standard
NAXIS = 0 / number of data axes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Only the first three cards are shown above.
 To get a list of all keywords, use the keys() method of the card list:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> prihdr.ascardlist().keys() 
\end_layout

\begin_layout Standard
['SIMPLE','BITPIX','NAXIS', ...]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Working with Image Data
\end_layout

\begin_layout Standard
If an HDU's data is an image, the 
\emph on
data
\emph default
 attribute of the HDU object will return a numarray object.
 Refer to the numarray Manual for details of manipulating these numerical
 arrays.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> scidata = hdulist[1].data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, scidata points to the data object in the second HDU (the first HDU,
 
\emph on
hdulist[0]
\emph default
, being the primary HDU) in 
\emph on
hdulist
\emph default
, which corresponds to the 
\emph on
'SCI'
\emph default
 extension.
 Alternatively, you can access the extension by its extension name (specified
 in the 
\emph on
EXTNAME
\emph default
 keyword):
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> scidata = hdulist['SCI'].data
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lyxline

\end_layout

\begin_layout Standard
If there is more than one extension with the same 
\emph on
EXTNAME, EXTVER's
\emph default
 value needs to be specified as the second argument, e.g.: 
\emph on
hdulist['sci',2]
\emph default
.
\end_layout

\begin_layout Standard

\lyxline

\end_layout

\begin_layout Standard
The returned numarray object has many attributes and methods for a user
 to get information about the array, e.
 g.:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> scidata.shape
\end_layout

\begin_layout Standard
(800, 800) 
\end_layout

\begin_layout Standard
>>> scidata.type() 
\end_layout

\begin_layout Standard
Float32
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since image data is a numarray object, we can slice it, view it, and perform
 mathematical operations on it.
 To see the pixel value at x=5, y=2:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> print scidata[1,4]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that, like C (and unlike FORTRAN), Python is 0-indexed and the indices
 have the slowest axis first and fast axis last, i.e.
 for a 2-D image, the fast axis (X-axis) which corresponds to the FITS NAXIS1
 keyword, is the second index.
 Similarly, the sub-section of x=11 to 20 (inclusive) and y=31 to 40 (inclusive)
 is:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> scidata[30:40, 10:20]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To update the value of a pixel or a sub-section:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> scidata[30:40,10:20] = scidata[1,4] = 999
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example changes the values of both the pixel [1,4] and the sub-section
 [30:40,10:20] to the new value of 999.
\end_layout

\begin_layout Standard
Next example of array arithmetics is to convert the image data from counts
 to flux:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Standard
>>> photflam = hdulist[1].header[ photflam ] 
\end_layout

\begin_layout Standard
>>> exptime = prihdr[ exptime ] 
\end_layout

\begin_layout Standard
>>> scidata *= photflam / exptime
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example performs the math on the array in-place, thereby keeping the
 memory usage to a minimum.
 (Note: before Python 2.2.3, the use of "*=" may cause an error, this is fixed
 in later Python versions.) 
\end_layout

\begin_layout Standard
If at this point you want to preserve all the changes you made and write
 it to a new file, you can use the 
\emph on
writeto()
\emph default
 method of HDUList (see below).
\end_layout

\begin_layout Subsubsection
Working with Table Data
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
